{"version":3,"sources":["components/renderer/source-templates lazy /^/.//.*$/ groupOptions: {} namespace object","components/search/index.jsx","components/renderer/index.jsx","components/preloader/index.jsx","utils/constants.js","services/http/index.js","utils/actions.js","services/search-engines/index.js","App.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Search","onSearch","sources","onSourceChange","className","placeholder","value","style","width","length","defaultValue","onChange","source","idx","Option","key","EmptyTemplate","description","Renderer","blocks","currentSource","type","justify","align","props","Component","React","lazy","fallback","size","INSTA_BASE_URL","HTTP","axios","create","baseURL","interceptors","response","use","data","fetchYouTubeVideos","q","maxResults","get","params","part","items","snippet","videoId","fetchInstaImages","image_type","hits","largeImageURL","previewURL","toString","engines","youtube","fetchData","instagram","searchEngines","initialState","renderData","searchQuery","loading","ReactDOM","render","useState","state","setState","catch","document","getElementById"],"mappings":"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","file":"static/js/main.fc4a294b.chunk.js","sourcesContent":["var map = {\n\t\"./instagram\": [\n\t\t112,\n\t\t0\n\t],\n\t\"./instagram.js\": [\n\t\t112,\n\t\t0\n\t],\n\t\"./youtube\": [\n\t\t113,\n\t\t1\n\t],\n\t\"./youtube.js\": [\n\t\t113,\n\t\t1\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 180;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input, Select } from 'antd';\n\nconst Search = ({ onSearch, sources, onSourceChange }) => (\n  <div className=\"search-container\">\n    <Input.Search\n      placeholder=\"input search text\"\n      onSearch={value => onSearch(value)}\n      style={{ width: 300 }}\n    />\n    {sources.length > 0 && (\n      <Select defaultValue={sources[0]} style={{ width: 120 }} onChange={onSourceChange}>\n        {sources.map((source, idx) => <Select.Option key={idx} value={source}>{source}</Select.Option>)}\n      </Select>\n    )}\n  </div>\n);\n\nSearch.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  sources: PropTypes.array.isRequired,\n  onSourceChange: PropTypes.func.isRequired,\n};\n\nexport default Search;\n\n","import React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Empty, Spin } from 'antd';\n\nconst EmptyTemplate = (\n  <Empty\n    className='app-empty-description'\n    description={(\n      <span>\n        No data fetched yet, press search to find something.\n      </span>\n    )}\n  />\n);\n\nconst Renderer = ({ blocks, currentSource }) => {\n  const getTemplate = (props, idx) => {\n    const Component = React.lazy(() => import(`./source-templates/${currentSource}`));\n    return (\n      <Suspense key={idx} fallback={<Spin/>}>\n        <Component {...props}/>\n      </Suspense>\n    )\n  };\n\n  return (\n    <div className=\"renderer-container\">\n      <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n        {blocks.length > 0 ? blocks.map(getTemplate) : EmptyTemplate}\n      </Row>\n    </div>\n  )\n};\n\nRenderer.propTypes = {\n  blocks: PropTypes.array.isRequired,\n  currentSource: PropTypes.string.isRequired\n};\n\nexport default Renderer;\n","import React from 'react';\nimport { Spin } from 'antd';\n\nexport default () => (\n  <div className=\"spin-container\">\n    <Spin size=\"large\" />\n  </div>\n);\n","const protocol = process.env.NODE_ENV === 'development' ? 'http' : 'https';\n\nexport const YOUTUBE_BASE_URL = 'https://content.googleapis.com/youtube/v3';\nexport const GOOGLE_API_KEY = 'AIzaSyD8R_uDDj9lf1wEmLGF6f7f3bYKzMjxsFo';\nexport const INSTA_BASE_URL = `${protocol}://pixabay.com/api/`;\nexport const INSTA_API_KEY = '13277981-5b107df2ee968cd1b9a72a461';\n","import axios from \"axios\";\nimport {YOUTUBE_BASE_URL} from \"../../utils/constants\";\n\nconst HTTP = axios.create({\n  baseURL: YOUTUBE_BASE_URL\n});\n\nHTTP.interceptors.response.use(\n  response => response.data ? response.data : response\n);\n\nexport default HTTP;\n","import HTTP from '../services/http'\nimport { GOOGLE_API_KEY, INSTA_BASE_URL, INSTA_API_KEY } from './constants'\n\nexport const fetchYouTubeVideos = ({ q, maxResults = 20, type = 'video' }) => HTTP\n  .get('/search', {\n    params: {\n      part: 'snippet',\n      type,\n      q,\n      maxResults,\n      key: GOOGLE_API_KEY\n    }\n  })\n  .then(response => response.items.map(({ id, snippet }) => ({\n    id: id.videoId,\n    snippet\n  })));\n\nexport const fetchInstaImages = ({ q }) => HTTP\n  .get(INSTA_BASE_URL, {\n    params: {\n      key: INSTA_API_KEY,\n      q,\n      image_type: 'photo'\n    }\n  })\n  .then(response => response.hits.map(({ largeImageURL, previewURL, id }) => ({\n    largeImageURL,\n    previewURL,\n    id: id.toString()\n  })));\n","import {fetchInstaImages, fetchYouTubeVideos} from \"../../utils\";\n\nconst engines = {\n  youtube: {\n    fetchData: (...args) => fetchYouTubeVideos(...args)\n  },\n  instagram: {\n    fetchData: (...args) => fetchInstaImages(...args)\n  }\n};\n\nexport const searchEngines = engines;\nexport const sources =  Object.keys(engines);\n","import React, { useState } from 'react';\nimport './App.css';\nimport Search from './components/search';\nimport Renderer from './components/renderer';\nimport Preloader from './components/preloader';\nimport { searchEngines, sources } from './services/search-engines';\n\nconst initialState = {\n  renderData: [],\n  searchQuery: '',\n  loading: false,\n  source: sources[0]\n};\n\nexport default function App() {\n  const [state, setState] = useState(initialState);\n\n  const changeCurrentSource = source => setState({ ...initialState, source });\n\n  const onClickSearchBtn = q => {\n    setState({ ...state, loading: true });\n    const { fetchData } = searchEngines[state.source];\n    fetchData({ q })\n      .then(renderData => setState({\n        ...state,\n        renderData,\n        loading: false\n      }))\n      .catch(() => setState({ ...state, loading: false }))\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Search\n        onSearch={onClickSearchBtn}\n        sources={sources}\n        onSourceChange={changeCurrentSource}\n      />\n      {state.loading\n        ? <Preloader />\n        : <Renderer\n            blocks={state.renderData}\n            currentSource={state.source}\n          />\n      }\n\n      {/*{JSON.stringify(state)}*/}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}